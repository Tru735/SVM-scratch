import numpy as np 
import matplotlib.pyplot as plt
from matplotlib import style
style.use('ggplot')

class supportVectorMachine:
    def __init__(self, visualization=True): #to visualize
        self.visualization = visualization
        self.colors = {1:'r', -1:'b'}
        if self.visualization:
            self.fig = plt.figure()
            self.ax = self.fig.add_subplot(1,1,1)
            
    #train       
    def fit(self,data):
        self.data = data 
        #{ ||w|| : [w ,b]} --> format of dictionary
        opt_dict = {}
        
        transforms = [[1,1],[1,-1],[-1,1],[-1,-1]]
        
        all_data = []
        for yi in self.data:
            for featureset in self.data[yi]:
                for feature in featureset:
                    all_data.append(feature) 
        self.maxFeatureValue = max(all_data)
        self.minFeatureValue = min(all_data)
        
        step_sizes = [self.maxFeatureValue * 0.1,
                      self.maxFeatureValue * 0.01,
                    #not really mattering anymore atp
                      self.maxFeatureValue * 0.001]  
        
        b_range_multiple = 5
        
        b_multiple = 5
        
        latest_optimum = self.maxFeatureValue*10
        
        for step in step_sizes:
            w = np.array([latest_optimum,latest_optimum])
            optimized = False
            while not optimized:
                for b in np.arange(-1*(self.maxFeatureValue)*(b_range_multiple), self.maxFeatureValue*b_range_multiple, step*b_multiple):
                    for transformation in transforms:
                        w_t = w*transformation
                        foundOption = True
                        for i in self.data:
                            for xi in self.data[i]:
                                yi = i
                                if not yi*(np.dot(xi , w_t)+b)>=1 :
                                    foundOption = False
                                
                        if foundOption:
                            opt_dict[np.linalg.norm(w_t)] = [w_t , b]
                            
                if w[0]<0:
                    optimized = True
                    print('optimized a step.')
                    
                else:
                    w = w - step
            
            norms = sorted([n for n in opt_dict])
            opt_choice = opt_dict[norms[0]]
            latest_optimum = opt_choice[0][0]+step*2
            
            self.w = opt_choice[0]
            self.b = opt_choice[1]
            
                
                                
    
    def predict(self, features):
        #sign(x.w + b)
        classification = np.sign(np.dot( np.array(features),self.w ) + self.b)
        if classification!=0 and self.visualization:
            self.ax.scatter(features[0], features[1], s=200, marker='*', c = self.colors[classification])
        return classification
    
    def visualize(self):
        [[self.ax.scatter(x[0], x[1], s=100, marker = '.', color = self.colors[i]) for x in data_dic[i]] for i in data_dic]
        
        def hyperplane(x , w, b, v):
            # v = x.w+b
            # + sv = +1
            # - sv = -1
            # decision = 0
            return(v-b-w[0]*x)/w[1]    
        datarange = (self.minFeatureValue*0.9,self.maxFeatureValue*1.1)
        hyp_min = datarange[0]
        hyp_max = datarange[1]
        
        #for positive boundary
        psv1 = hyperplane(hyp_min, self.w, self.b, 1)
        psv2 = hyperplane(hyp_max, self.w, self.b, 1)
        self.ax.plot([hyp_min,hyp_max],[psv1,psv2])
        #for negative boundary
        nsv1 = hyperplane(hyp_min, self.w, self.b, -1)
        nsv2 = hyperplane(hyp_max, self.w, self.b, -1)
        self.ax.plot([hyp_min,hyp_max],[nsv1,nsv2])
        #for decision boundary
        dsv1 = hyperplane(hyp_min, self.w, self.b, 0)
        dsv2 = hyperplane(hyp_max, self.w, self.b, 0)
        self.ax.plot([hyp_min,hyp_max],[dsv1,dsv2])

        plt.show()
        
        
data_dic = {-1: np.array([[1,7],[2,8],[3,8]]), 1: np.array([[5,1],[6,-1],[7,3]])} 

svm = supportVectorMachine()
svm.fit(data = data_dic)
svm.visualize()